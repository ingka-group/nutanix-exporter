name: Release CI

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**/*.md'
      - '**/*.yml'
      
permissions:
  contents: read
  id-token: write

jobs:
  docker:
    name: Build + Push Docker Image
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Determine version
      id: create_version
      uses: paulhatch/semantic-version@v5.4.0
      with:
        tag_prefix: 'v'
        major_pattern: "(MAJOR)"
        minor_pattern: "(MINOR)"
        version_format: "${major}.${minor}.${patch}"
        bump_each_commit: true
        bump_each_commit_patch_pattern: "(PATCH)"

    - name: Set up Artifactory CLI
      uses: jfrog/setup-jfrog-cli@v4
      id: login
      env:
        JF_URL: https://${{ secrets.JF_URL }}
      with:
        oidc-provider-name: "ghec-ingka-group"
        oidc-audience: "jfrog-github"

    - name: Set up Artifactory Server
      run: |
        export SERVER_ID="Artifactory"        
        export URL=https://${{ secrets.JF_URL }}
        jf c add $SERVER_ID --url=$URL --access-token=${{ steps.login.outputs.oidc-token }} --interactive=false

    - name: Build and Publish Go Package
      run: |
        BUILD_NAME=${{ github.repository }}
        export VERSION=v${{ steps.create_version.outputs.version }}

        # Configure the project's repositories:
        jf go-config --repo-resolve=${{ secrets.JF_GO_DEV_REPO }} --repo-deploy=${{ secrets.JF_GO_DEV_REPO }}
    
        # Build the project with go and resolve the project dependencies from Artifactory.
        # The `go build` command is copied from `make compile`
        jf go build -ldflags "-X $(go list -m)/internal/version.Version=${VERSION}" ./... --build-name=$BUILD_NAME --build-number=$VERSION
    
        # Publish the package to the <GO_DEPLOY_REPO> repository in Artifactory.
        jf go-publish --build-name=$BUILD_NAME --build-number=$VERSION $VERSION

    - name: Build Docker Image
      run: |
        docker build -t nutanix_exporter:${{ steps.create_version.outputs.version }} .
    
    - name: Push Docker Image to Artifactory
      if: success()
      run: |
        IMAGE_NAME="nutanix_exporter"
        VERSION="${{ steps.create_version.outputs.version }}"
        ARTIFACTORY_URL="${{ secrets.JF_URL }}/${{ secrets.JF_DOCKER_PROD_REPO }}/nutanix"
        FULL_IMAGE_NAME="$ARTIFACTORY_URL/${IMAGE_NAME}"

        # Tag the image with the specific version and 'latest'
        docker tag ${IMAGE_NAME}:${VERSION} ${FULL_IMAGE_NAME}:${VERSION}
        docker tag ${IMAGE_NAME}:${VERSION} ${FULL_IMAGE_NAME}:latest

        # Push both tags to Artifactory
        jf rt docker-push ${FULL_IMAGE_NAME}:${VERSION} ${{ secrets.JF_DOCKER_PROD_REPO }}
        jf rt docker-push ${FULL_IMAGE_NAME}:latest ${{ secrets.JF_DOCKER_PROD_REPO }}
      env:
        JFROG_CLI_OFFER_CONFIG: "false"
  
    - name: Discard Old Builds in Artifactory
      if: success() && steps.create_version.outputs.version != ''
      run: |
        jf rt bdi c --max-builds=5

    - name: Create Github Release
      if: success() && steps.create_version.outputs.version != ''
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.create_version.outputs.version }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
